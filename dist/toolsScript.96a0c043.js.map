{"version":3,"sources":["toolsScript.js"],"names":["openCloseCategoriesDiv","document","querySelector","categoryHeadingContainer","querySelectorAll","openCloseCategoriesDivText","chartButtonContainer","openOrCloseCategoryList","chartSelectionPanelContainer","openCategoryListIcon","classList","contains","remove","style","transform","add","addEventListener","categoryArrowOpen","categoryArrowClose","openOrCloseCategory","i","display","length","dataPageContainer","dataPageOptions","rootMargin","threshold","marketsCryptoObserver","IntersectionObserver","entries","forEach","entry","isIntersecting","changeChartScale","event","target","autoChartOption","backgroundColor","logChartOption","chartScale","displayedChart","options","scales","y","type","update","getAssetList","fetch","assetListURL","response","json","assetListData","asset","id","assetID","listOptions","createElement","name","assetName","value","appendChild","createTextNode","assetListEl","console","log","changeAsset","changeDisplayedAsset","URL","selectedAssetID","selectedTimePeriod","data","prices","priceAndTimeData","time","epochTimeframe","formattedDate","Date","longTimeframe","toUTCString","timeframe","substring","chartTime","push","labels","fetchedPriceData","price","DataObject","label","selectedAssetName","fill","pointRadius","borderWidth","borderColor","yAxisID","assetPriceData","datasets","changeAssetEl","selectedOption","selectedIndex","error","changeTimeframe","fetchNewTimeframe","timeframeList","fetchData","addDataButton","selectedTimePeriodEl","ctx","Chart","position","responsive","maintainAspectRatio","grid","color","ticks","callback","index","values","toLocaleString","marketCryptoPriceContainer","observe","marketsStocksObserver","stockPriceChart","method","headers","ticker","myAPIkey","timeframeData","unorderedTimeframeData","timeSeries","timeSeriesData","reverse","stockPriceData","reversedFetchedPrice","priceSeriesData","allPriceDataObject","Object","allPrices","closePrices","closePrice","Number","dataObject","publicStockChartTimeframe","fetchStockList","changeColorOfInvestmentChart","InitialInvestmentValue","currentInvestmentValue","publicCompanyInvestmentReturns","beginAtZero","selectedAsset","stockName","stockList","names","optionEl","nameOfStock","fullTicker","justTicker","split","pop","singleticker","trim","publicStockHoldingFullName","selectedStock","text","innerHTML","publicStockHoldingTicker","nameofSelectedCryptoPublicCompany","UpperCaseSelectedAsset","charAt","toUpperCase","slice","firstCompanydata","companyTotalCryptoHoldings","unformattedTotalCryptoHoldings","totalCryptoHoldings","companyTotalUSDholdings","unformattedUsdHoldings","totalUsdHoldings","percentOfTotalSupply","investmentAmounts","let","changeHeldAsset","chartBTCButton","chartETHButton","nameOfPublicCompany","stockPriceCanvas","heldAssetByPublicCompanies","investmentReturnChart","window","publicStockAssetHoldingChart","width","marketPublicstockChartContainer"],"mappings":"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","file":"toolsScript.96a0c043.js","sourceRoot":"../src","sourcesContent":["  // CODE FOR THE CATEGORY LIST FUNCTION\n// display and hide the category list\nconst openCloseCategoriesDiv = document.querySelector('.openCloseCategoriesDiv');\nconst categoryHeadingContainer = document.querySelectorAll('.categoryHeadingContainer');\nconst openCloseCategoriesDivText = document.querySelector('.containerSignDiv');\nconst chartButtonContainer = document.querySelectorAll('.chartButtonContainer');\nfunction openOrCloseCategoryList() {\n\n  // variables\n  const chartSelectionPanelContainer = document.querySelector('.chartSelectionPanelContainer');\n  const openCategoryListIcon = document.querySelector('.fa-arrow-right-to-bracket');\n\n  if (openCloseCategoriesDiv.classList.contains('openCategoryList')) {\n    openCloseCategoriesDiv.classList.remove('openCategoryList');\n    chartSelectionPanelContainer.style.transform = 'translateX(-100%)';\n    openCategoryListIcon.style.transform = 'rotate(0deg)';\n    openCloseCategoriesDivText.style.transform = 'rotate(-90deg) translateY(0%)';\n  } else {\n    openCloseCategoriesDiv.classList.add('openCategoryList');\n    chartSelectionPanelContainer.style.transform = 'translateX(0%)';\n    openCategoryListIcon.style.transform = 'rotate(180deg)';\n    openCloseCategoriesDivText.style.transform = 'rotate(-90deg) translateY(-100%)';\n  }\n}\nopenCloseCategoriesDiv.addEventListener('click', openOrCloseCategoryList);\nopenCloseCategoriesDivText.addEventListener('click', openOrCloseCategoryList);\nfor (let i = 0; i < categoryHeadingContainer.length; i++) {\n\n  // variables\n  const categoryArrowOpen = document.querySelectorAll('.fa-arrow-down-short-wide');\n  const categoryArrowClose = document.querySelectorAll('.fa-arrow-up-short-wide');\n\n  // function to open or close the category\n  function openOrCloseCategory() {\n    if (chartButtonContainer[i].classList.contains('opened')) {\n      chartButtonContainer[i].classList.remove('opened');\n      categoryArrowOpen[i].style.display = 'none';\n      categoryArrowClose[i].style.display = 'block';\n\n    } else {\n      chartButtonContainer[i].classList.add('opened');\n      categoryArrowOpen[i].style.display = 'block';\n      categoryArrowClose[i].style.display = 'none';\n    }\n  };\n  categoryHeadingContainer[i].addEventListener('click', openOrCloseCategory);\n};\n\n  // START OF THE DATA PAGES // START OF THE DATA PAGES // START OF THE DATA PAGES\nconst dataPageContainer = document.querySelectorAll('.dataSubPageContainer');\nconst dataPageOptions = {\n  rootMargin: \"0px\",\n  threshold: 0\n};\n\n  // MARKETS PAGE -- CRYPTOCURRENCIES // MARKETS PAGE -- CRYPTOCURRENCIES // MARKETS PAGE -- CRYPTOCURRENCIES\nconst marketsCryptoObserver = new IntersectionObserver(function(entries, marketsCryptoObserver) {\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n\n      // CODE FOR CHANGING THE CHART SCALE\n      let chartScale = 'linear'; //logarithmic or linear\n      const autoChartOption = document.querySelector('.autoChartOption');\n      autoChartOption.addEventListener('click', changeChartScale)\n      const logChartOption = document.querySelector('.logChartOption');\n      logChartOption.addEventListener('click', changeChartScale);\n      function changeChartScale(event) {\n      if (event.target.classList.contains('autoChartOption')) {\n          autoChartOption.style.backgroundColor = 'rgb(128, 128, 128, 0.6)';\n          logChartOption.style.backgroundColor = 'rgb(128, 128, 128, 0.2)';\n          chartScale = 'linear';\n          displayedChart.options.scales.y.type = chartScale;\n          displayedChart.update();\n      } else {\n              autoChartOption.style.backgroundColor = 'rgb(128, 128, 128, 0.2)';\n              logChartOption.style.backgroundColor = 'rgb(128, 128, 128, 0.6)';\n              chartScale = 'logarithmic';\n              displayedChart.options.scales.y.type = chartScale;\n              displayedChart.update();\n          }\n      };\n\n      // variables for the chart\n      let chartTime = []; //fetched data\n      let selectedTimePeriod = '365';\n      let assetPriceData = []; //fetched data\n      let selectedAssetID = 'bitcoin';\n      let selectedAssetName = 'Bitcoin';\n\n      // fetch initial data\n      try {\n        async function fetchData() {\n          let URL = `https://api.coingecko.com/api/v3/coins/${selectedAssetID}/market_chart?vs_currency=usd&days=${selectedTimePeriod}`;\n          let response = await fetch(URL);\n          let data = await response.json();\n          let priceAndTimeData = await data.prices;\n\n          // adding the fetched time to the chart\n          for (const time of priceAndTimeData) {\n            let epochTimeframe = await time[0];\n            let formattedDate = new Date(epochTimeframe);\n            let longTimeframe = formattedDate.toUTCString();\n            let timeframe = longTimeframe.substring(5, 16);\n            chartTime.push(timeframe);\n          };\n          displayedChart.data.labels = chartTime;\n\n          // adding the fetched price to the chart\n          let fetchedPriceData = [];\n          for (const price of priceAndTimeData) {\n            let prices = await price[1];\n            fetchedPriceData.push(prices);\n          };\n          let DataObject = {\n            label: `Price of ${selectedAssetName}`,\n            data: fetchedPriceData,\n            fill: false,\n            pointRadius: 0,\n            borderWidth: 1,\n            backgroundColor: '#FFFFFF',\n            borderColor: '#FFFFFF',\n            yAxisID: 'y'\n          };\n          assetPriceData.push(DataObject);\n          displayedChart.data.datasets = assetPriceData;\n\n          // update the chart with data and time\n          displayedChart.update();\n        }\n        fetchData();\n      }\n      catch(error) {\n        console.log('could not fetch initial data...');\n      }\n\n        // generate list of assets\n      const assetListURL = 'https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=250&page=1&sparkline=false';\n      const assetListEl = document.querySelector('.assetList');\n      const addDataButton = document.querySelector('.addDataButton');\n      async function getAssetList() {\n        try {\n            // fetch the list of assets\n            let response = await fetch(assetListURL);\n            let assetListData = await response.json();\n\n            for (const asset of assetListData) {\n                // for the ID \n                let assetID = await asset.id;\n                const listOptions = document.createElement('option');\n                listOptions.classList.add(assetID);\n\n                // for the display name\n                let assetName = await asset.name;\n                listOptions.value = await assetName;\n\n                // add option onto the dropdown selection\n                listOptions.appendChild(document.createTextNode(assetName));\n                assetListEl.appendChild(listOptions);\n            }\n        }\n        catch(error) {\n            console.log(error);\n            console.log('cannot get list of assets from CoinGecko...');\n        }\n      }\n      getAssetList();\n\n      // change asset\n      function changeAsset() {\n        try {\n\n          // clear old chart history\n          assetPriceData = [];\n          chartTime = [];\n          selectedAssetID = '';\n          selectedAssetName = '';\n\n              // change the data on the chart\n          const changeAssetEl = document.querySelector('.assetList');\n          let selectedOption = changeAssetEl.options[changeAssetEl.selectedIndex];\n          selectedAssetName = selectedOption.value;\n          selectedAssetID = selectedOption.classList[0];\n\n          async function changeDisplayedAsset() {\n            let URL = `https://api.coingecko.com/api/v3/coins/${selectedAssetID}/market_chart?vs_currency=usd&days=${selectedTimePeriod}`;\n            let response = await fetch(URL);\n            let data = await response.json();\n            let priceAndTimeData = await data.prices;\n  \n            // adding the fetched time to the chart\n            for (const time of priceAndTimeData) {\n              let epochTimeframe = await time[0];\n              let formattedDate = new Date(epochTimeframe);\n              let longTimeframe = formattedDate.toUTCString();\n              let timeframe = longTimeframe.substring(4, 16);\n              chartTime.push(timeframe);\n            };\n            displayedChart.data.labels = chartTime;\n  \n            // adding the fetched price to the chart\n            let fetchedPriceData = [];\n            for (const price of priceAndTimeData) {\n              let prices = await price[1];\n              fetchedPriceData.push(prices);\n            };\n            let DataObject = {\n              label: `Price of ${selectedAssetName}`,\n              data: fetchedPriceData,\n              fill: false,\n              pointRadius: 0,\n              borderWidth: 1,\n              backgroundColor: '#FFFFFF',\n              borderColor: '#FFFFFF',\n              yAxisID: 'y'\n            };\n            assetPriceData.push(DataObject);\n            displayedChart.data.datasets = assetPriceData;\n  \n            // update the chart with data and time\n            displayedChart.update();\n          };\n          changeDisplayedAsset();\n\n        } \n        catch(error) {\n          console.log('Could not add new asset to chart....')\n        }\n      }\n      const changeAssetEl = document.querySelector('.assetList');\n      changeAssetEl.addEventListener('change', changeAsset);\n\n\n      // change timeframe\n      function changeTimeframe() {\n        try {\n          selectedTimePeriod = '';\n          assetPriceData = [];\n          chartTime = [];\n\n          const timeframeList = document.querySelector('.timeframeList');\n          selectedTimePeriod = timeframeList.value;\n  \n          async function fetchNewTimeframe() {\n            let URL =  `https://api.coingecko.com/api/v3/coins/${selectedAssetID}/market_chart?vs_currency=usd&days=${selectedTimePeriod}`;\n            let response = await fetch(URL);\n            let data = await response.json();\n            let priceAndTimeData = await data.prices;\n\n            // adding the newly fetched time to the chart\n            for (const time of priceAndTimeData) {\n              let epochTimeframe = await time[0];\n              let formattedDate = new Date(epochTimeframe);\n              let longTimeframe = formattedDate.toUTCString();\n              let timeframe = longTimeframe.substring(4, 16);\n              chartTime.push(timeframe);\n            }\n            displayedChart.data.labels = chartTime;\n\n            // adding the fetched price to the chart\n            let fetchedPriceData = [];\n            for (const price of priceAndTimeData) {\n              let prices = await price[1];\n              fetchedPriceData.push(prices);\n            };\n            let DataObject = {\n              label: `Price of ${selectedAssetName}`,\n              data: fetchedPriceData,\n              fill: false,\n              pointRadius: 0,\n              borderWidth: 1,\n              backgroundColor: '#FFFFFF',\n              borderColor: '#FFFFFF',\n              yAxisID: 'y'\n            };\n            assetPriceData.push(DataObject);\n            displayedChart.data.datasets = assetPriceData;\n  \n            // update the chart with data and time\n            displayedChart.update();\n  \n          }\n          fetchNewTimeframe();\n  \n  \n        }\n        catch(error) {\n          console.log('could not fetch new timeframe data...');\n        }\n      }\n      const selectedTimePeriodEl = document.querySelector('.timeframeList');\n      selectedTimePeriodEl.addEventListener('change', changeTimeframe);\n      \n      // CODE FOR THE CHART.JS LIBRARY\n      const ctx = document.querySelector('.marketCryptoPrice');\n      let displayedChart = new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: chartTime,\n          datasets: assetPriceData,\n        },\n        options: {\n          type: chartScale,\n          display: true,\n          position: 'left',\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            y: {\n              grid: {\n                color: '#232323',\n              },\n              ticks: {\n                // Include a dollar sign in the ticks\n                callback: function(value, index, values) {\n                    return '$' + value.toLocaleString(\"en-US\");\n                }\n            }\n            }\n          }\n        }\n      });\n      // end of the Intersection Observer\n    };\n  })\n}, dataPageOptions);\nconst marketCryptoPriceContainer = document.querySelector('.marketCryptocurrrencyChartContainer');\nmarketsCryptoObserver.observe(marketCryptoPriceContainer);\n\n\n  // MARKETS PAGE -- PUBLIC EXCHANGES, STAKERS & MINERS // MARKETS PAGE -- PUBLIC EXCHANGES, STAKERS & MINERS\nconst marketsStocksObserver = new IntersectionObserver(function(entries, marketsStocksObserver) {\n  entries.forEach(entry => {\n    if (entry.isIntersecting) {\n      const myAPIkey = 'GH9DTBAMAJL2HKD1';\n\n      // CODE FOR CHANGING THE CHART SCALE\n      let chartScale = 'logarithmic'; //logarithmic or linear\n      const autoChartOption = document.querySelector('.stockAutoChartOption');\n      autoChartOption.addEventListener('click', changeChartScale)\n      const logChartOption = document.querySelector('.stockLogChartOption');\n      logChartOption.addEventListener('click', changeChartScale);\n      function changeChartScale(event) {\n      if (event.target.classList.contains('autoChartOption')) {\n        autoChartOption.style.backgroundColor = 'rgb(128, 128, 128, 0.6)';\n        logChartOption.style.backgroundColor = 'rgb(128, 128, 128, 0.2)';\n        chartScale = 'linear';\n        stockPriceChart.options.scales.y.type = chartScale;\n        stockPriceChart.update();\n      } \n      else {\n        autoChartOption.style.backgroundColor = 'rgb(128, 128, 128, 0.2)';\n        logChartOption.style.backgroundColor = 'rgb(128, 128, 128, 0.6)';\n        chartScale = 'logarithmic';\n        stockPriceChart.options.scales.y.type = chartScale;\n        stockPriceChart.update();\n      }\n      };\n\n      // variables for price, time, and ticker\n      let timeframeData = [];\n      let stockPriceData = [];\n      let reversedFetchedPrice = [];\n      let fetchedPriceData = [];\n      let ticker = 'MSTR';\n      let nameOfPublicCompany = 'MicroStrategy Inc.';\n\n      let timeframe = 'TIME_SERIES_DAILY_ADJUSTED'; // TIME_SERIES_DAILY_ADJUSTED, TIME_SERIES_WEEKLY_ADJUSTED\n      let timeSeries = 'Time Series (Daily)'; // Time Series (Daily), Weekly Adjusted Time Series\n\n      // function to initially fetch the data\n      async function fetchData() {\n        try {\n          const options = {\n              method: 'GET',\n              headers: {\n                  'X-RapidAPI-Key': '5abcde3910mshe635fb57c055c0fp10d768jsna1801b9b4a77',\n                  'X-RapidAPI-Host': 'real-time-finance-data.p.rapidapi.com'\n              }\n          };\n\n          // Creating the URL and fetching the data\n          let URL = `https://www.alphavantage.co/query?function=${timeframe}&symbol=${ticker}&apikey=${myAPIkey}`;\n          let response = await fetch(URL);\n          let data = await response.json();\n\n          // to fetch timeframe\n          timeframeData = [];\n          let unorderedTimeframeData = [];\n          let timeSeriesData = await data[`${timeSeries}`];\n          for (const time in timeSeriesData) {  \n            unorderedTimeframeData.push(time);\n          }\n          timeframeData = unorderedTimeframeData.reverse();\n          stockPriceChart.data.labels = timeframeData;\n\n          // to fetch price data\n          stockPriceData = [];\n          reversedFetchedPrice = [];\n          fetchedPriceData = [];\n          let priceSeriesData = await data[`${timeSeries}`];\n          let allPriceDataObject = Object.values(priceSeriesData);\n          for (let i = 0; i < allPriceDataObject.length; i++) {\n            let allPrices = allPriceDataObject[`${i}`];\n            let closePrices = Object.values(allPrices);\n            let closePrice = Number(closePrices[4]);\n            reversedFetchedPrice.push(closePrice);\n          };\n          fetchedPriceData = reversedFetchedPrice.reverse();\n          \n          let dataObject = {\n            label: `Price of ${ticker}`,\n            data: fetchedPriceData,\n            fill: false,\n            pointRadius: 0,\n            borderWidth: 1,\n            backgroundColor: '#FFFFFF',\n            borderColor: '#FFFFFF',\n            yAxisID: 'y'\n          };\n          stockPriceData.push(dataObject);\n          stockPriceChart.data.datasets = stockPriceData;\n\n          // update chart\n          stockPriceChart.update();\n        } \n        catch(error) {\n          console.log(error);\n          console.log('could not fetch data');\n        };\n      };\n      fetchData();\n\n\n      // change timeframe for main stock chart\n      function changeTimeframe() {\n\n        if (publicStockChartTimeframe.value == 'TIME_SERIES_DAILY_ADJUSTED') {\n          timeSeries = 'Time Series (Daily)'; // Time Series (Daily), Weekly Adjusted Time Series\n          timeframe = publicStockChartTimeframe.value;\n\n        } else {\n          timeSeries = 'Weekly Adjusted Time Series'; // Time Series (Daily), Weekly Adjusted Time Series\n          timeframe = publicStockChartTimeframe.value;\n        }\n        fetchData();\n      };\n      const publicStockChartTimeframe = document.querySelector('.publicStockTimeframeSelection');\n      publicStockChartTimeframe.addEventListener('change', changeTimeframe);\n\n      // CODE FOR THE MAIN PRICE CHART\n      const stockPriceCanvas = document.querySelector('.marketStockPrice');\n      let stockPriceChart = new Chart(stockPriceCanvas, {\n        type: 'line',\n        data: {\n          labels: timeframeData,\n          datasets: stockPriceData,\n        },\n        options: {\n          type: chartScale,\n          display: true,\n          position: 'left',\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            y: {\n              grid: {\n                color: '#232323',\n              },\n              ticks: {\n                callback: function(value, index, values) {\n                  return '$' + value.toLocaleString(\"en-US\");\n                }\n              }\n            }\n          }\n        }\n      });\n\n\n      // INVESTMENT RETURN DATA AND CHART\n      let selectedAsset = 'bitcoin';\n      let investmentAmounts = [];\n      let backgroundColor = 'rgb(255,255,255, 0.15)';\n\n      async function fetchStockList() {\n\n        let URL = `https://api.coingecko.com/api/v3/companies/public_treasury/${selectedAsset}`;\n\n        let response = await fetch(URL);\n        let data = await response.json();\n        console.log(data);\n\n        // fetch the names of the stocks\n        let stockName = await data['companies'];\n        const stockList = document.querySelector('.stockList');\n        for (const names of stockName) {\n          // create the element for the drop down list\n          const optionEl = document.createElement('option');\n          let nameOfStock = names['name'];\n          optionEl.appendChild(document.createTextNode(nameOfStock));\n          let fullTicker = names['symbol'];\n          let justTicker = fullTicker.split(':').pop();\n          let singleticker = justTicker.trim();\n          optionEl.value = singleticker;\n          stockList.appendChild(optionEl);\n        }\n\n        // fetch the data on the text section\n        let publicStockHoldingFullName = document.querySelector('.publicStockHoldingFullName');\n        let selectedStock = stockList.options[stockList.selectedIndex].text;\n        publicStockHoldingFullName.innerHTML = selectedStock; \n        let publicStockHoldingTicker = document.querySelector('.publicStockHoldingTicker');\n        publicStockHoldingTicker.innerHTML = stockList.value;\n        let nameofSelectedCryptoPublicCompany = document.querySelector('.nameofSelectedCryptoPublicCompany');\n        let UpperCaseSelectedAsset = selectedAsset.charAt(0).toUpperCase() + selectedAsset.slice(1);\n        nameofSelectedCryptoPublicCompany.innerHTML = UpperCaseSelectedAsset;\n\n        // fetch the total holding data\n        let firstCompanydata = await data['companies'][0];\n        let companyTotalCryptoHoldings = document.querySelector('.companyTotalCryptoHoldings');\n        let unformattedTotalCryptoHoldings = await firstCompanydata['total_holdings'];\n        let totalCryptoHoldings = unformattedTotalCryptoHoldings.toLocaleString();\n        companyTotalCryptoHoldings.innerHTML = totalCryptoHoldings;\n        let companyTotalUSDholdings = document.querySelector('.companyTotalUSDholdings');\n        let unformattedUsdHoldings = await firstCompanydata['total_current_value_usd'];\n        let totalUsdHoldings = unformattedUsdHoldings.toLocaleString();\n        companyTotalUSDholdings.innerHTML = totalUsdHoldings;\n\n        // fetch the dominance and total supply\n        let percentOfTotalSupply = document.querySelector('.publicCompanyMarketCapDominance');\n        percentOfTotalSupply.innerHTML = firstCompanydata['percentage_of_total_supply'];\n\n        // fetch the investment returns\n        investmentAmounts = [];\n        let InitialInvestmentValue = await stockName[0]['total_entry_value_usd'];\n        investmentAmounts.push(InitialInvestmentValue);\n        let = currentInvestmentValue = await stockName[0]['total_current_value_usd'];\n        investmentAmounts.push(currentInvestmentValue);\n        console.log(investmentAmounts);\n        publicCompanyInvestmentReturns.data.datasets.forEach(data => {\n          data.data.push(InitialInvestmentValue);\n          data.data.push(currentInvestmentValue);\n        });\n\n        function changeColorOfInvestmentChart() {\n          if (InitialInvestmentValue < currentInvestmentValue) {\n            backgroundColor = 'rgb(0,255,0, 0.15)';\n          } else {\n            backgroundColor = 'rgb(255,0,0, 0.15)';\n          }\n          publicCompanyInvestmentReturns.data.datasets.forEach(data => {\n            data.backgroundColor = backgroundColor;\n          });\n          publicCompanyInvestmentReturns.options.scales.y.ticks.beginAtZero = false;\n        };\n        changeColorOfInvestmentChart();\n\n        publicCompanyInvestmentReturns.update();\n      };\n      fetchStockList();\n\n      // if the user changes the held asset\n      const heldAssetByPublicCompanies = document.querySelectorAll('.heldAssetByPublicCompanies');\n      function changeHeldAsset(event) {\n        const chartBTCButton = document.querySelector('.chartBTCButton');\n        const chartETHButton = document.querySelector('.chartETHButton');\n        if (event.target.value == 'bitcoin') {\n          chartBTCButton.style.backgroundColor = 'rgb(128, 128, 128, 0.6)';\n          chartETHButton.style.backgroundColor = 'rgb(128, 128, 128, 0.2)';\n          selectedAsset = event.target.value;\n          fetchStockList();\n          changeColorOfInvestmentChart();\n        } else {\n          chartBTCButton.style.backgroundColor = 'rgb(128, 128, 128, 0.2)';\n          chartETHButton.style.backgroundColor = 'rgb(128, 128, 128, 0.6)';\n          selectedAsset = event.target.value;\n          fetchStockList();\n          changeColorOfInvestmentChart();\n        }\n\n      };\n      heldAssetByPublicCompanies.forEach(asset => {\n        asset.addEventListener('click', changeHeldAsset);\n      });\n\n      // CODE FOR THE INVESTMENT RETURN CHART\n      const investmentReturnChart = document.querySelector('.publicStockAssetHoldingChart');\n      let publicCompanyInvestmentReturns = new Chart(investmentReturnChart, {\n        type: 'line',\n        data: {\n          labels: ['Initial Investment', 'Current Value'],\n          datasets: [{\n            label: 'Gain/Loss',\n            data: investmentAmounts,\n            fill: true,\n            pointRadius: 0,\n            borderWidth: 1,\n            backgroundColor: backgroundColor,\n            borderColor: '#FFFFFF',\n          }]\n        },\n        options: {\n          type: 'logarithmic',\n          display: true,\n          position: 'left',\n          responsive: true,\n          maintainAspectRatio: false,\n          scales: {\n            y: {\n              grid: {\n                color: '#232323',\n              },\n              ticks: {\n                beginAtZero: false,\n                callback: function(value, index, values) {\n                  return '$' + value / 1e9 + ' ' + 'B';;\n                }\n              }\n            }\n          }\n        }\n      });\n      window.addEventListener(\"resize\", (event) => {\n        const publicStockAssetHoldingChart = document.querySelector('.publicStockAssetHoldingChart');\n        publicStockAssetHoldingChart.style.width = '100%';\n      });\n\n\n\n\n    // End of the if statement for the intersection observer\n    }\n  })\n}, dataPageOptions);\nconst marketPublicstockChartContainer = document.querySelector('.marketPublicstockChartContainer');\nmarketsStocksObserver.observe(marketPublicstockChartContainer);"]}